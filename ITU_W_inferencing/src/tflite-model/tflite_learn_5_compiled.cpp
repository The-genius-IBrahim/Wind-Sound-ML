/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 29.04.2024 18:05:37

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 6
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 12
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 9056;
#else
constexpr int kTensorArenaSize = 8032;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,3168 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0030943627934902906, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 99, 32, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 99, 1, 16, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 16, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 25, 16, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data6[4] = { 1, 25, 1, 8, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data7[2] = { -1, 104, };
const TfArray<1, int> tensor_dimension7 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data8[6] = { 397, -172, -224, 82, 129, -314, };
const TfArray<1, int> tensor_dimension8 = { 1, { 6 } };
const TfArray<1, float> quant8_scale = { 1, { 0.002298255218192935, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[6*8] = { 
  -9, -40, -53, -122, -46, 43, 10, 22, 
  -39, -26, 3, -44, -127, 38, -27, -17, 
  -30, -32, -68, 12, -32, 10, 21, -7, 
  -10, -37, -3, 6, 16, -17, -31, 28, 
  27, 2, -6, 20, 11, -45, 17, -12, 
  16, 28, 3, 22, -10, -72, 11, -14, 
};
const TfArray<2, int> tensor_dimension9 = { 2, { 6,8 } };
const TfArray<1, float> quant9_scale = { 1, { 0.016916027292609215, } };
const TfArray<1, int> quant9_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[8] = { -124, -1028, -204, -228, 1599, 1480, -108, -136, };
const TfArray<1, int> tensor_dimension10 = { 1, { 8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00041975683416239917, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[8*104] = { 
  -15, -16, 12, 9, -6, 15, -15, -23, -16, -18, -15, -11, 6, 6, 11, -24, 6, 16, -9, -4, -12, -10, -16, -2, 13, 8, 14, -19, -21, -3, -7, -4, 4, 8, -11, -1, 10, -16, -8, -16, 3, 8, -20, -3, -20, -13, -12, -19, 9, 1, -16, -10, -4, 9, -10, 5, -12, 1, -25, -24, 18, -20, -6, 4, -20, -3, 14, -5, -21, 10, 9, 7, -10, -21, -1, 13, -20, 6, -18, -11, 8, -20, 4, 16, 17, -13, 3, -4, 7, -19, -20, -4, 2, 5, -4, 14, -14, 13, -1, 10, 9, -18, 2, 10, 
  69, 4, -2, -51, 6, 29, -24, 8, 39, 23, 5, -36, -4, 13, 19, 18, -13, 4, 0, -27, -14, 16, 10, 15, -43, 30, -5, -37, 13, 20, -11, 28, 41, 14, -2, -56, 6, 34, -1, 6, -82, 24, -2, -19, -9, 21, -31, 9, -127, 12, -3, -25, 9, 26, -14, 21, -121, 5, -5, -62, 2, 33, -4, 16, 20, 13, 6, -73, 12, 39, -26, 5, 40, 13, -6, -67, 6, 10, -5, 13, 54, 28, 17, -55, -3, 13, 39, 25, 38, 15, 13, -30, -8, 25, 8, 5, 35, 24, -5, -31, -9, 44, -24, 4, 
  -10, 23, -8, -22, 6, 34, 51, 10, -3, 5, -1, -12, 16, -14, -12, 19, -63, -8, 22, -15, 7, 6, -46, 17, -46, 32, 7, -17, -6, 13, -38, 5, -12, 33, -5, -27, 15, 13, 2, 33, -53, 30, 24, -23, -9, 17, 1, 40, -12, 9, 18, -19, -6, 14, 10, 16, 7, 0, 9, -42, 7, 25, 17, 24, -72, 17, -1, -32, 5, -18, 27, 6, -53, 7, 5, -41, 1, 30, 5, 21, -103, 0, 14, -39, 9, 12, 12, -1, -103, 10, 16, -6, 11, 9, 26, -7, -100, 18, 20, -34, -8, 42, 15, 43, 
  -33, 42, 23, 10, 45, 18, 13, 27, -4, -1, 23, -4, 19, 19, -17, 15, -3, 3, 30, -3, 39, 41, -26, 31, -34, 9, 32, 3, 29, 5, -7, 9, -20, 8, 12, 9, 23, -12, 1, 16, -21, 18, 25, 2, 27, -19, 16, 9, -18, 17, 27, -2, 41, 15, 56, 5, -22, 14, 38, 3, 49, 32, 4, 15, -16, 18, 2, -2, 35, 25, 22, 30, -14, 27, 36, 3, 21, 18, 47, 1, -39, -1, 28, 14, 22, -10, -8, 11, -16, 21, 18, 2, 28, 20, 39, 31, 8, 4, 18, -5, 27, -4, -15, 0, 
  -8, 44, 5, -17, 7, 36, -19, 4, 41, 13, 9, 1, 4, 37, 3, 10, 21, 21, 3, -7, -6, 11, 7, 8, 12, 9, 27, -26, 25, 2, -49, 27, -43, 35, 12, -14, 2, 24, -26, 27, -61, 9, 13, -6, 30, -32, -20, 11, -54, 18, 5, -7, 17, -3, -48, 26, 2, -4, 15, -3, 8, -1, -29, 17, -19, 11, 26, -9, 17, 5, 13, 13, -53, 30, 16, 3, 11, 22, -31, 31, -71, 27, 6, 6, 5, -1, 11, 31, -66, 26, 2, -14, 22, -5, 34, 17, -54, -2, 58, -24, 31, 21, 12, 27, 
  15, -24, -2, 67, 16, -20, 83, -14, 21, -9, -1, 57, 23, -6, 10, -17, 96, -3, 5, 55, 6, -24, 30, -5, -21, -17, 27, 25, 13, -20, 83, -4, -54, 0, 32, 77, 9, -36, 9, -10, -43, -13, 23, 41, 29, -7, 29, -18, -40, -10, 23, 42, 5, 5, 37, 6, -43, 4, 7, 58, 33, -3, 36, -14, -57, -16, 17, 60, 31, -8, 47, 6, -86, -15, 17, 50, 16, -18, 26, -9, -66, -7, 29, 62, 39, -9, 14, 3, -66, 22, 23, 55, 12, -8, -20, 14, -64, -19, 10, 33, 22, -26, 16, 9, 
  -10, -18, -4, -17, -10, 9, 16, 9, -18, -7, 2, -14, -6, -12, -3, -17, 0, 0, 18, 4, 6, -10, -16, -17, -4, 1, 1, -18, 13, -4, 8, -2, 5, -11, 4, 12, -22, -12, -14, 3, -12, -9, -2, 13, -11, 15, -20, 6, 17, -14, -15, -13, 13, 6, 12, 16, 16, -8, -11, -12, -4, -5, -16, -13, 7, 16, 13, -11, -18, -4, 15, 8, 7, 13, -5, -4, 3, -12, 6, -2, -13, -15, -14, 16, -9, 3, -15, -17, 4, 17, -16, 8, -14, -2, -9, -7, 22, -7, -7, -14, 11, 5, -5, -3, 
  -30, -9, -10, -9, 1, 0, -14, 7, 9, 1, -25, 4, -14, -24, -7, 4, -1, -14, -34, -10, -7, 11, -11, -14, -10, -8, -16, -16, -8, -14, -19, -17, 6, -20, -5, 1, -12, -11, 4, 10, -28, -20, -6, -2, -21, -17, 7, -4, 3, -14, -14, -29, -15, 12, 1, -16, -27, -18, -27, -30, -4, -24, 6, 7, 10, -5, 1, -6, -5, 13, 7, -13, -10, 15, -7, -21, 4, 4, -18, -2, -8, 7, -15, -11, -25, -14, 1, -4, -16, -7, -29, -12, 0, 3, -3, -14, -25, 0, -6, -28, -15, -11, -10, -1, 
};
const TfArray<2, int> tensor_dimension11 = { 2, { 8,104 } };
const TfArray<1, float> quant11_scale = { 1, { 0.011852025054395199, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int32_t tensor_data12[8] = { 1691, -1610, 2093, 5855, 2726, -3119, -1728, -315, };
const TfArray<1, int> tensor_dimension12 = { 1, { 8 } };
const TfArray<8, float> quant12_scale = { 8, { 0.00014350083074532449, 9.1355228505562991e-05, 9.8511743999551982e-05, 9.890082583297044e-05, 9.5068477094173431e-05, 7.6929572969675064e-05, 0.00014729249232914299, 0.00010113648750120774, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[8*1*3*16] = { 
  /* [0][0][][] */ 27,36,32,2,11,-7,-29,-3,-83,18,61,12,-71,31,8,-70, 8,-127,23,33,-35,-69,-26,1,-99,-9,48,-80,-96,8,-36,50, 40,-68,8,56,-8,-1,-48,9,-119,-20,56,12,-72,-33,8,-7, 
  /* [1][0][][] */ -6,-66,-19,-15,66,-6,50,53,41,60,-6,67,10,-63,85,25, -9,-50,2,-5,10,4,-33,-33,29,68,-57,23,48,22,-2,-27, -36,79,1,8,-12,40,80,18,17,-35,127,-74,19,19,5,62, 
  /* [2][0][][] */ -14,-42,21,41,-56,5,30,-24,47,-48,-58,-10,22,-32,-64,-10, -11,35,1,-8,-64,37,7,-40,68,-3,-115,18,103,101,-56,113, 17,-8,19,31,-79,71,23,-3,31,-23,-127,60,25,30,-60,24, 
  /* [3][0][][] */ 76,48,81,86,-91,16,-15,-33,3,-46,-45,36,14,52,-90,-40, 97,74,60,50,-81,30,14,-71,8,-49,-38,15,22,9,-85,-63, 49,127,56,24,-20,117,-4,-27,12,-12,-39,-62,31,-56,-30,-78, 
  /* [4][0][][] */ 41,6,0,36,-79,48,34,-101,29,-63,-122,-35,87,23,-78,-16, 43,-25,13,30,-51,73,21,-48,34,-13,-117,41,28,38,7,13, 8,22,29,7,-54,-20,31,-44,49,14,-100,61,127,45,-41,-3, 
  /* [5][0][][] */ -37,-46,-40,9,67,-53,12,34,31,84,-80,-28,1,52,127,-2, -82,-47,-74,-26,101,69,48,1,59,66,-41,10,12,96,102,52, -35,104,-51,-55,71,-106,34,14,-28,65,114,47,20,-93,105,-77, 
  /* [6][0][][] */ -21,-9,-36,-44,-6,6,-17,2,-24,5,29,-11,-76,-2,-12,17, 6,25,4,62,-47,50,16,-15,-14,-15,-17,-26,-16,-46,-6,10, 19,22,-12,-6,-15,83,13,-17,-43,9,-51,-17,5,127,-24,21, 
  /* [7][0][][] */ -11,34,-3,-5,-26,64,19,77,-13,71,-36,5,-20,-54,77,-16, -21,-74,-4,-20,43,-67,44,48,25,30,-15,32,26,-48,14,127, -9,-34,9,10,32,-15,20,-11,56,54,-7,8,16,-53,27,-34, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 8,1,3,16 } };
const TfArray<8, float> quant13_scale = { 8, { 0.009652579203248024, 0.0061450065113604069, 0.00662638945505023, 0.0066525610163807869, 0.0063947783783078194, 0.0051746652461588383, 0.0099076246842741966, 0.0068029426038265228, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { 2812, -2335, 5208, 2502, -5898, -2389, -781, -5995, 810, -4815, 793, -2634, 1461, -1661, -5555, -356, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 9.7419819212518632e-05, 7.2399016062263399e-05, 5.6506818509660661e-05, 5.9376685385359451e-05, 6.5349653596058488e-05, 8.2773745816666633e-05, 4.2679046600824222e-05, 6.0367969126673415e-05, 6.4982072217389941e-05, 7.5744057539850473e-05, 0.0001455938327126205, 4.0245235140901059e-05, 6.5468695538584143e-05, 6.7106098867952824e-05, 7.6057258411310613e-05, 5.6648292229510844e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*3*16] = { 
  /* [0][0][][] */ -15,63,-43,-3,-9,-36,3,4,14,-17,34,4,55,-33,9,-19, -15,52,-53,-4,-24,-45,15,4,16,-32,48,29,89,-37,-5,-20, -18,41,-49,-20,-21,-39,21,-24,6,25,48,24,127,-19,3,-17, 
  /* [1][0][][] */ -48,67,-8,-13,-3,-109,-8,-31,-26,78,-61,-19,127,-9,-32,-29, 1,-77,61,-30,-18,-68,2,17,19,16,-38,-30,72,-69,-29,-64, -18,90,94,2,-5,-21,14,26,34,7,-37,2,-10,32,-76,-5, 
  /* [2][0][][] */ -40,66,-112,-28,1,-46,10,-16,48,-46,69,48,98,-77,-11,7, -52,71,-127,-32,-25,-39,28,6,32,-19,-1,10,46,-49,21,-2, -31,122,-82,-45,36,-47,-28,-43,-12,-115,47,14,102,-62,-4,-30, 
  /* [3][0][][] */ -19,-44,-48,-63,-10,-62,-18,-16,17,-101,16,20,20,-107,-6,-1, -51,90,-124,-34,45,-57,19,-15,45,-53,56,-7,61,-97,-14,-8, -35,115,-127,-42,-34,-35,-1,26,-1,39,76,-1,52,-96,45,14, 
  /* [4][0][][] */ -3,-116,62,25,-33,-23,0,31,-83,-127,-29,-84,-57,85,11,3, 37,-54,92,8,-35,44,-10,12,-83,-125,-32,-74,-47,52,35,-13, -13,-42,23,25,-29,30,-31,44,-69,-122,-29,-86,15,56,22,4, 
  /* [5][0][][] */ -17,-15,-6,12,-17,-3,-13,32,-6,38,-35,-48,6,-8,-58,-55, -14,99,40,3,12,14,-22,54,-1,13,-14,-31,-63,0,-24,-44, -28,127,38,11,13,18,14,66,27,47,18,-32,-46,-9,18,-11, 
  /* [6][0][][] */ 66,23,-47,89,-34,-10,6,7,36,-31,39,-2,-12,52,18,3, -16,63,-116,85,-30,48,-45,-74,8,-14,62,-4,-113,56,-74,-35, 81,48,92,-14,11,76,1,107,-4,-12,23,-13,127,89,75,65, 
  /* [7][0][][] */ 24,-117,127,-33,-27,39,31,4,-11,-37,29,-60,11,98,24,29, 8,-54,-46,28,33,14,39,-11,-42,-68,-16,-97,-12,32,27,20, -7,-49,112,66,-12,14,20,-27,-51,-117,-7,-60,-35,-9,-28,21, 
  /* [8][0][][] */ 19,-35,-45,43,-5,-13,17,-21,-6,-41,-9,-1,127,-26,-35,46, 6,12,-2,41,4,33,-9,-69,-3,-77,43,-3,70,-42,71,1, -3,4,4,25,9,19,-20,37,-11,-59,-10,-3,81,33,90,43, 
  /* [9][0][][] */ 25,-104,85,36,-19,28,10,8,-1,-78,2,-55,-38,46,-1,13, 11,-28,-127,48,-18,12,-17,20,-10,-61,-10,-72,-60,43,-2,15, 5,-13,30,7,9,13,-16,28,-19,-39,15,-49,-28,74,18,-21, 
  /* [10][0][][] */ -27,-6,-7,-7,4,-19,6,-12,-15,-18,-2,-7,-72,-29,-127,-94, -23,-11,-2,-7,-15,-2,-4,-11,-1,-7,-5,19,-67,2,-107,-79, -2,1,26,-18,-3,-22,11,-24,8,-1,-18,1,-69,-1,-126,-109, 
  /* [11][0][][] */ -25,4,-92,90,40,29,-29,-127,-95,-80,-95,-107,26,-32,-19,42, -38,-29,-88,26,-56,-122,-35,-78,12,9,-39,-53,30,-49,7,-113, -71,5,-81,14,-32,-48,-23,-5,-48,-59,-100,1,-81,9,14,-58, 
  /* [12][0][][] */ -91,-44,-114,-4,-10,-49,21,-77,1,-74,-24,-3,64,-71,-14,-18, -38,29,-50,-42,6,-69,-22,8,-7,-126,0,-6,69,-56,103,28, -23,34,-100,-77,8,-61,1,-56,-3,-96,24,-4,71,-127,88,56, 
  /* [13][0][][] */ 8,61,-8,-21,-35,26,-13,-42,-32,-10,-55,-3,-66,-11,-59,-40, -42,-15,41,-50,25,-53,-18,45,-13,73,-10,-80,21,-39,-7,-9, -32,-12,-91,-10,-35,23,16,127,-16,-46,-15,-102,6,1,-16,-12, 
  /* [14][0][][] */ 27,-127,53,24,-10,45,-1,-8,12,-45,25,-51,-52,22,24,-10, 28,-77,47,37,0,-14,0,-30,-9,-102,-13,-70,-74,59,2,-13, 33,-45,50,45,20,16,30,46,-49,-84,-12,-62,-22,55,-20,7, 
  /* [15][0][][] */ 74,20,47,-23,10,-34,-17,-88,56,-73,-3,-65,9,-90,-5,33, -12,-86,101,-45,-40,-71,8,27,-10,-84,-36,-111,-4,25,-10,31, -15,-3,45,37,-29,35,5,96,-3,-99,-17,-125,22,53,-110,-127, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,3,16 } };
const TfArray<16, float> quant15_scale = { 16, { 0.010807443410158157, 0.0080317156389355659, 0.0062686861492693424, 0.0065870597027242184, 0.0072496817447245121, 0.0091826552525162697, 0.0047346772626042366, 0.0066970298066735268, 0.0072089037857949734, 0.0084028039127588272, 0.016151715070009232, 0.0044646780006587505, 0.0072628883644938469, 0.0074445363134145737, 0.0084375496953725815, 0.0062843807972967625, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[16] = { -18819, -3890, -7240, -24767, -11616, -17772, -9984, -11635, 2925, 840, 578, 14251, -291, -22220, -389, -796, };
const TfArray<1, int> tensor_dimension16 = { 1, { 16 } };
const TfArray<16, float> quant16_scale = { 16, { 2.3580374545417726e-05, 1.6390960809076205e-05, 3.7540252378676087e-05, 2.3844086172175594e-05, 8.6910868049017154e-06, 2.7265496100881137e-05, 6.0544634834514e-06, 1.9302080545458011e-05, 1.266697290702723e-05, 4.9551541451364756e-05, 1.9224893549107946e-05, 3.052933607250452e-05, 3.7315603549359366e-05, 2.6361780328443274e-05, 2.8547599868034013e-05, 1.5849787814659066e-05, } };
const TfArray<16, int> quant16_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[16*1*3*32] = { 
  /* [0][0][][] */ 24,44,-6,19,-25,-7,21,-27,0,-12,3,12,18,-2,-23,-43,5,17,20,22,22,-10,-24,24,-11,39,-3,7,32,-22,-36,31, 32,67,44,1,-5,6,12,-27,18,29,36,-14,2,-3,-24,-33,-16,28,19,8,12,-31,-36,-41,-19,-8,-6,16,-4,-16,20,87, 57,53,24,7,3,20,13,-18,9,-4,17,13,1,-9,6,8,1,-15,7,26,21,25,-22,6,-21,9,-8,-17,27,-17,-1,127, 
  /* [1][0][][] */ -58,-38,-127,-117,-74,-70,-23,-9,-92,3,-23,-11,-28,-64,-34,-29,-51,-28,-73,-16,-16,-92,-8,-25,-93,-84,-48,-2,71,-32,-50,-59, -110,-52,-64,-71,-73,-54,-74,-44,-23,-35,-59,14,-56,-57,59,-8,-30,8,-55,3,37,-36,28,36,-34,-49,4,32,73,-5,-31,-63, -83,-54,-3,8,-7,46,-36,44,48,21,77,83,96,52,87,71,90,78,54,67,83,50,48,64,8,-14,-51,20,-14,-73,-97,-95, 
  /* [2][0][][] */ 0,-16,-17,10,-88,-58,-7,53,-24,-19,11,-70,-47,-40,9,-57,14,-6,1,-57,30,98,15,-24,-12,8,9,16,-45,22,78,43, -1,26,-21,-30,-60,-37,-31,6,-12,-15,-31,-10,-36,-91,-94,-123,-122,-6,-26,-56,26,127,9,-14,-6,15,-2,-86,-60,-43,-40,-10, 37,44,44,17,21,1,16,-6,19,73,57,39,-17,22,12,32,9,15,14,-37,-7,22,-24,-8,36,16,-52,-96,-99,-25,15,58, 
  /* [3][0][][] */ 21,38,45,31,28,2,-10,-7,23,12,19,38,30,34,8,6,24,25,0,-12,-3,6,-8,28,45,5,9,17,28,-12,27,74, 37,45,30,29,19,-9,-12,0,-2,1,22,21,-9,27,-48,-48,8,-8,-25,-21,-13,20,-5,11,-4,-4,13,-31,21,-28,-7,-37, 14,23,4,23,12,-15,-18,1,-1,-3,-38,5,-17,-19,-30,-38,-17,-17,-2,21,-5,-14,-43,10,-27,18,3,-5,34,-9,-22,127, 
  /* [4][0][][] */ 61,-26,-67,-15,-38,-70,7,-75,-84,-103,-95,-96,-98,-17,18,-116,-90,-19,-74,-75,18,30,-45,45,-13,-28,-47,-103,-93,-15,-49,65, -39,-12,-27,-92,-37,39,-64,-127,-10,-112,-83,-18,-71,-27,37,-75,-107,-35,-29,-37,-16,-62,-29,41,61,-63,46,-45,-49,-75,-48,14, -90,-61,-2,-30,-71,28,17,14,-86,-80,-98,-101,-53,34,-112,-89,-56,-77,-7,21,39,-78,-10,71,-2,-30,38,-41,36,6,-59,-13, 
  /* [5][0][][] */ 32,38,34,-6,-4,-9,11,1,-11,-4,-8,21,7,11,-28,-35,0,16,0,20,-19,8,-14,-15,10,6,16,-12,9,1,4,7, 13,29,33,9,-3,1,21,-4,18,24,14,-3,14,25,-21,-20,18,7,19,-12,-8,11,-25,-6,8,-2,2,3,2,-24,3,110, 65,46,19,8,16,1,5,11,-22,11,-2,4,28,-17,-16,6,-13,-2,8,16,-3,18,-23,2,6,41,30,-3,30,-5,-9,127, 
  /* [6][0][][] */ 46,-29,-31,-39,-96,-78,-49,1,-53,4,-53,-22,-15,117,48,4,39,-72,-93,-61,-41,48,-89,46,33,-48,-104,71,-59,51,-53,-37, -100,-27,-44,76,-94,-89,100,-55,-6,-95,-103,-20,89,-88,-1,-81,67,17,-29,37,8,-127,-48,-73,-25,-54,-74,-120,-26,-56,-118,-21, -83,-101,-7,-49,-69,76,17,23,-85,68,-35,-72,-53,-79,-79,46,8,25,-85,52,19,-92,-68,57,-14,-17,-62,53,-76,50,63,38, 
  /* [7][0][][] */ 90,58,37,-28,2,41,29,-7,52,40,22,-16,35,14,46,8,48,72,63,67,42,7,-55,21,91,109,33,-40,-26,-5,-16,47, 31,1,3,-67,-14,-13,8,9,26,19,7,-2,4,-9,-56,-7,14,51,9,61,2,23,-12,28,44,44,9,20,-8,11,16,127, 29,-9,-57,-50,-58,-47,-76,-62,-47,-37,-77,-62,-22,-13,-56,-78,-31,-37,-15,5,-36,-59,-94,-60,-72,12,-4,-28,-15,-17,-22,69, 
  /* [8][0][][] */ -12,-3,-52,-20,-36,-94,-114,26,33,-7,48,76,7,-28,-27,-19,-49,-49,-23,51,18,18,-40,-39,-42,16,26,54,22,72,79,-127, -58,-23,-41,84,-49,0,-47,-6,3,-18,-33,2,24,-19,-40,-76,-73,-74,-43,19,-31,15,-18,-66,-36,-50,31,57,-7,98,71,28, -47,34,-30,-51,-60,-84,-68,24,54,38,35,55,-58,13,-29,-25,-51,-22,-10,-6,14,16,-21,-36,-117,-42,8,42,-4,79,-30,-62, 
  /* [9][0][][] */ -38,-63,-18,-3,-8,-7,-42,-12,-25,9,-21,-9,10,28,32,8,-2,15,25,-35,-16,12,-15,26,33,17,17,22,-21,-8,-7,12, -29,-76,-21,5,1,-8,-30,-24,-35,-10,-27,-33,12,26,13,23,-8,3,37,-23,3,20,-38,7,39,30,25,14,10,4,-14,24, -22,-79,-35,-13,-11,-19,-28,-30,-18,-12,-19,-29,11,34,17,11,-21,7,33,-36,-9,0,-25,24,66,17,26,-13,-12,5,-3,127, 
  /* [10][0][][] */ 13,8,-87,1,-14,-49,-51,54,64,94,111,54,-84,-113,-84,-58,41,-12,-32,58,16,-30,39,-65,-120,-101,-54,29,-14,44,68,-41, 12,37,-63,9,18,-28,7,-68,-6,50,99,122,-55,-59,26,-49,-27,-21,3,90,13,-26,54,-65,-127,-79,-34,-15,15,26,59,36, -32,7,-16,-13,-7,-58,-116,-6,14,18,-28,27,-35,-73,-30,-35,-20,13,-25,98,46,-4,4,-44,-61,-84,-70,33,-3,-17,33,-84, 
  /* [11][0][][] */ -24,-35,-21,6,-20,-16,0,-4,3,10,27,23,5,-31,8,10,1,-1,-10,7,-8,-8,26,-19,-3,-26,-41,-17,-1,7,-37,-120, -23,-33,-20,25,17,9,-18,-3,5,-9,27,8,-4,-18,6,7,4,19,4,-3,-1,8,-4,-16,-4,-16,-44,-10,-31,15,-38,-50, -23,-15,-11,-3,10,-12,5,16,-9,-12,26,14,-20,0,-17,-8,18,4,10,-3,-12,1,41,15,-25,1,-36,-1,-14,-7,-17,-127, 
  /* [12][0][][] */ -13,11,-29,-30,-23,-31,71,81,-47,-78,-81,-16,-39,50,29,8,-44,-37,-31,43,-16,-112,9,-11,-29,12,-6,4,5,-6,-31,-1, -6,-45,-15,33,-56,-28,74,33,-74,-74,-22,20,25,107,127,37,-30,-28,3,5,-43,-66,-3,-93,-16,33,-5,-16,0,10,-10,-8, -2,-45,-43,-51,-41,-93,101,115,-30,-62,-79,-24,-23,104,103,37,23,-82,-53,55,8,-53,1,-62,-71,-32,-34,-9,9,-2,14,-3, 
  /* [13][0][][] */ 32,54,34,20,17,11,-2,-21,-6,9,0,-3,-4,11,6,14,1,18,4,13,-6,24,-24,-10,21,11,27,-4,1,3,-24,29, 54,47,31,1,14,3,20,-19,-14,-6,20,10,32,8,-11,-13,-14,-19,21,13,-10,23,-32,15,-2,0,-10,7,18,-46,2,127, 11,13,4,16,-23,-13,-1,-5,9,-10,-12,-8,0,11,-23,8,13,-13,-4,-5,3,-2,-14,16,-14,-10,18,-11,-28,-29,-48,60, 
  /* [14][0][][] */ 13,60,-17,-14,-12,16,-36,-29,45,0,91,85,15,-9,-43,-69,9,34,-13,16,-21,-17,47,-44,-17,19,-11,-11,-13,24,7,1, 28,79,-1,3,-1,0,-31,-52,-21,-11,-16,3,-5,-71,-103,-127,-22,6,-84,103,31,-25,38,-48,-60,-3,-43,1,-9,43,1,23, -33,57,-5,-17,-22,-9,-9,-39,24,-9,98,66,37,3,-14,-8,94,0,-81,82,32,0,36,-42,-120,-35,-23,0,8,-22,6,47, 
  /* [15][0][][] */ 42,76,1,-5,-31,-25,-18,34,84,-33,73,12,-12,37,56,-61,41,-49,-65,41,25,-50,23,-9,-54,-55,-48,8,15,-14,29,40, 1,114,-11,-37,-3,2,29,27,-7,-26,-43,-2,-14,-38,-28,-36,49,-17,-22,125,32,8,29,-26,-127,-55,-81,26,-5,55,-25,2, 52,86,19,-39,-49,-20,70,24,62,-25,111,35,27,-4,36,-37,11,37,-32,7,-15,-22,9,-85,-95,-19,-41,-35,5,25,30,80, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 16,1,3,32 } };
const TfArray<16, float> quant17_scale = { 16, { 0.0076204300858080387, 0.0052970391698181629, 0.012131820432841778, 0.0077056530863046646, 0.0028086837846785784, 0.0088113443925976753, 0.0019566107075661421, 0.0062378207221627235, 0.0040935641154646873, 0.016013488173484802, 0.0062128761783242226, 0.0098661137744784355, 0.012059220112860203, 0.008519291877746582, 0.0092256795614957809, 0.0051221488974988461, } };
const TfArray<16, int> quant17_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,1,99,32 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0030943627934902906, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,1,99,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.0090141408145427704, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,99,1,16 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0090141408145427704, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant21_scale = { 1, { 0.0090141408145427704, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant22_scale = { 1, { 0.0090141408145427704, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.014866579324007034, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant24_scale = { 1, { 0.014866579324007034, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant25_scale = { 1, { 0.014866579324007034, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant26_scale = { 1, { 0.014866579324007034, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,1,25,8 } };
const TfArray<1, float> quant27_scale = { 1, { 0.035416465252637863, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,25,1,8 } };
const TfArray<1, float> quant28_scale = { 1, { 0.035416465252637863, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,13,1,8 } };
const TfArray<1, float> quant29_scale = { 1, { 0.035416465252637863, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,104 } };
const TfArray<1, float> quant30_scale = { 1, { 0.035416465252637863, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<2, int> tensor_dimension31 = { 2, { 1,8 } };
const TfArray<1, float> quant31_scale = { 1, { 0.13586258888244629, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<2, int> tensor_dimension32 = { 2, { 1,6 } };
const TfArray<1, float> quant32_scale = { 1, { 0.50141078233718872, } };
const TfArray<1, int> quant32_zero = { 1, { 89 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<2, int> tensor_dimension33 = { 2, { 1,6 } };
const TfArray<1, float> quant33_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 18 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 18,17,16 } };
const TfArray<1, int> outputs1 = { 1, { 19 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 19,2 } };
const TfArray<1, int> outputs2 = { 1, { 20 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 20 } };
const TfArray<1, int> outputs3 = { 1, { 21 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 21,3 } };
const TfArray<1, int> outputs4 = { 1, { 22 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 22,15,14 } };
const TfArray<1, int> outputs5 = { 1, { 23 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 23,4 } };
const TfArray<1, int> outputs6 = { 1, { 24 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 24 } };
const TfArray<1, int> outputs7 = { 1, { 25 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 25,5 } };
const TfArray<1, int> outputs8 = { 1, { 26 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 26,13,12 } };
const TfArray<1, int> outputs9 = { 1, { 27 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 27,6 } };
const TfArray<1, int> outputs10 = { 1, { 28 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 28 } };
const TfArray<1, int> outputs11 = { 1, { 29 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 29,7 } };
const TfArray<1, int> outputs12 = { 1, { 30 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 30,11,10 } };
const TfArray<1, int> outputs13 = { 1, { 31 } };
const TfLiteFullyConnectedParams opdata14 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs14 = { 3, { 31,9,8 } };
const TfArray<1, int> outputs14 = { 1, { 32 } };
const TfLiteSoftmaxParams opdata15 = { 1 };
const TfArray<1, int> inputs15 = { 1, { 32 } };
const TfArray<1, int> outputs15 = { 1, { 33 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3168), (TfLiteIntArray*)&g0::tensor_dimension0, 3168, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 3168, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3168), (TfLiteIntArray*)&g0::tensor_dimension19, 1584, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 1584, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1584), (TfLiteIntArray*)&g0::tensor_dimension21, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 800), (TfLiteIntArray*)&g0::tensor_dimension23, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension24, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 800), (TfLiteIntArray*)&g0::tensor_dimension25, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension26, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension27, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension28, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 208), (TfLiteIntArray*)&g0::tensor_dimension29, 104, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension30, 104, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 112), (TfLiteIntArray*)&g0::tensor_dimension31, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension32, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension33, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[16] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[16] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 34, };
const size_t tflNodes_subgraph_index[] = {0, 16, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  33, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 34;
  for (size_t i = 0; i < 34; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 16; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
